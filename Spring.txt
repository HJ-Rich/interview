MVC 패턴이란?

MVC(Model-View-Controller)패턴은 아키텍쳐를 설계하기 위한 디자인 패턴입니다. 
MVC 패턴은 애플리케이션을 개발할 때 그 구성요소를 3가지로 나눕니다.
Model: 데이터를 저장하는 컴포넌트
View: 사용자 인터페이스(UI) 컴포넌트
Controller: 사용자의 요청을 처리하고 Model과 View를 중개하는 컴포넌트
출처: https://mangkyu.tistory.com/95 [MangKyu's Diary:티스토리]

Spring MVC란?

Spring MVC란 웹 애플리케이션 개발을 위한 MVC 패턴 기반의 웹 프레임워크입니다. Spring MVC는 애플리케이션의 구성요소를 Model, View, Controller로 분리합니다. 또한 Spring MVC는 아래와 같은 컴포넌트들로 구성됩니다.
Dispatcher Servlet: 클라이언트의 요청을 먼저 받아들이는 서블릿으로, 요청에 맞는 컨트롤러에게 요청을 전달함
Handler Mapping: 해당 요청이 어떤 컨트롤러에게 온 요청인지 검사함
Controller: 클라이언트의 요청을 받아 처리하여 결과를 디스패처 서블릿에게 전달함
ViewResolver: View의 이름을 통해 알맞은 View를 찾음
View: 사용자에게 보여질 UI 화면
출처: https://mangkyu.tistory.com/95 [MangKyu's Diary:티스토리]

Spring MVC 작동 원리

클라이언트는 URL을 통해 요청을 전송한다.
디스패처 서블릿은 핸들러 매핑을 통해 해당 요청이 어느 컨트롤러에게 온 요청인지 찾는다.
디스패처 서블릿은 핸들러 어댑터에게 요청의 전달을 맡긴다.
핸들러 어댑터는 해당 컨트롤러에 요청을 전달한다.
컨트롤러는 비지니스 로직을 처리한 후에 반환할 뷰의 이름을 반환한다.
디스패처 서블릿은 뷰 리졸버를 통해 반환할 뷰를 찾는다.
디스패처 서블릿은 컨트롤러에서 뷰에 전달할 데이터를 추가한다.
데이터가 추가된 뷰를 반환한다.    
출처: https://mangkyu.tistory.com/95 [MangKyu's Diary:티스토리]

Spring MVC의 장점과 단점 그리고 SpringBoot

장점
의존성 주입을 통해 컴포넌트 간의 결합도를 낮출 수 있어 단위테스트가 용이함
제어의 역전을 통해 빈(객체)의 라이프싸이클에 관여하지 않고 개발에 집중할 수 있음
단점
XML을 기반으로 하는 프로젝트 설정은 너무 많은 시간을 필요로 함
톰캣과 같은 WAS를 별도로 설치해주어야 함
해결책(Spring Boot)
자주 사용되는 라이브러리들의 버전 관리 자동화
AutoConfig로 복잡한 설정 자동화
Tomcat과 같은 내장 웹서버 제공
실행 가능한 JAR로 개발 가능
출처: https://mangkyu.tistory.com/95 [MangKyu's Diary:티스토리]

Spring @Bean, @Configuration, @Component 어노테이션

@Bean: 개발자가 직접 제어가 불가능한 외부 라이브러리 또는 설정을 위한 클래스를 수동으로 빈 등록할 때 사용
@Configuration: 1개 이상의 @Bean 메소드를 갖는 클래스의 경우에 반드시 명시해 주어야 함
@Component: 개발자가 직접 개발한 클래스를 컴포넌트 스캔 방식으로 자동으로 빈 등록할 때 사용
출처: https://mangkyu.tistory.com/95 [MangKyu's Diary:티스토리]

